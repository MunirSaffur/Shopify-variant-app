{%- liquid
  if use_variant
    assign target = product.selected_or_first_available_variant
  else
    assign target = product
  endif

  assign price = target.price | default: 1999
-%}

<div class="custom-product-form" id="custom-product-form-{{ block.id }}">
  <label for="boyen-{{ block.id }}">Boy x En</label>
  <select id="boyen-{{ block.id }}" name="boyen">
    <option value="">Seçiniz</option>
  </select>

  <label for="materyal-{{ block.id }}">Materyal</label>
  <select id="materyal-{{ block.id }}" name="materyal">
    <option value="">Seçiniz</option>
  </select>

  <p class="custom-form-error" style="color:red; display:none;">Lütfen tüm alanları doldurunuz.</p>
  <p class="estimated-price" style="font-weight:bold; margin-top:10px; display:none;"></p>
</div>

<script>
document.addEventListener("DOMContentLoaded", async () => {
  const container = document.getElementById("custom-product-form-{{ block.id }}");
  if (!container) return;

  const dimensionSelector = container.querySelector("#boyen-{{ block.id }}");
  const materyalSelector = container.querySelector("#materyal-{{ block.id }}");
  const errorBox = container.querySelector(".custom-form-error");
  const estimatedPrice = container.querySelector(".estimated-price");

  const basePrice = {{ price | json }};
  let currentMultiple = 1;
  let materialExtra = 0;

  // price formatting logic
  function formatMoney(cents) {
    return (cents / 100).toLocaleString(undefined, {
      minimumFractionDigits: 2,
      maximumFractionDigits: 2
    });
  }

  // price estimating update
  function updateEstimatedPrice() {
    if (!dimensionSelector.value && !materyalSelector.value) {
      estimatedPrice.style.display = "none";
      return;
    }
    const est = (basePrice * currentMultiple) + materialExtra;
    estimatedPrice.textContent = "Estimated price: " + formatMoney(est);
    estimatedPrice.style.display = "block";
  }

  // get variant data from app server
  try {
    const res = await fetch("https://fall-video-ind-factor.trycloudflare.com/api/custom-variants");
    const json = await res.json();
    const data = json.data;

    data.dimension.forEach(item => {
      const opt = document.createElement("option");
      opt.value = item.option;
      opt.textContent = item.option;
      opt.dataset.multiple = item.multiple;
      dimensionSelector.appendChild(opt);
    });

    data.material.forEach(item => {
      const opt = document.createElement("option");
      opt.value = item.option;
      opt.textContent = item.option;
      opt.dataset.price = item.price * 100; // convert to cents
      materyalSelector.appendChild(opt);
    });
  } catch (e) {
    console.error("Variant load failed", e);
  }

  // update price on variant change
  dimensionSelector.addEventListener("change", e => {
    currentMultiple = parseFloat(e.target.selectedOptions[0].dataset.multiple || 1);
    updateEstimatedPrice();
  });

  materyalSelector.addEventListener("change", e => {
    materialExtra = parseFloat(e.target.selectedOptions[0].dataset.price || 0);
    updateEstimatedPrice();
  });

  //  Add to Cart logic
  const addBtn = document.querySelector("form[action*='/cart/add'] [type='submit']");
  if (addBtn) {
    addBtn.addEventListener("click", e => {
      if (!dimensionSelector.value || !materyalSelect.value) {
        e.preventDefault();
        errorBox.style.display = "block";
      } else {
        errorBox.style.display = "none";
        const form = addBtn.closest("form");
        ["Boy x En","Materyal"].forEach(name => {
          const old = form.querySelector(`input[name="properties[${name}]"]`);
          if (old) old.remove();
        });
        const bx = document.createElement("input");
        bx.type="hidden"; bx.name="properties[Boy x En]"; bx.value=boyEnSelect.value;
        form.appendChild(bx);
        const mt = document.createElement("input");
        mt.type="hidden"; mt.name="properties[Materyal]"; mt.value=materyalSelect.value;
        form.appendChild(mt);
      }
    });
  }
});
</script>

<style>
  variant-radios { display: none !important; }

  .custom-product-form {
    display: flex;
    flex-direction: column;
    gap: 10px;
    max-width: 300px;
  }

  .custom-product-form select {
    padding: 8px;
    border: 1px solid #ddd;
    border-radius: 6px;
  }

  .estimated-price {
    font-size: 16px;
    color: #222;
  }

  @media (max-width: 768px) {
    .custom-product-form { max-width: 100%; }
  }
</style>

{% schema %}
{
  "name": "Custom Variant Form",
  "target": "section",
  "settings": [
    { "type": "product", "id": "product", "label": "Ürün", "autofill": true }
  ]
}
{% endschema %}
